package pipe.gui.widgets;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Pattern;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import jpowergraph.PIPEInitialState;

import com.sun.xml.internal.ws.api.server.Container;

import pipe.dataLayer.DataLayer;
import pipe.dataLayer.MarkingParameter;
import pipe.dataLayer.Place;
import pipe.dataLayer.TimedPlace;
import pipe.gui.CreateGui;
import pipe.gui.GuiView;
import pipe.gui.Pipe;

/**
 *
 * @author  pere
 */
public class TimedPlaceEditorPanel 
        extends javax.swing.JPanel {
   
   TimedPlace place;
   Boolean attributesVisible;
   Integer marking;
   String name;
   MarkingParameter mParameter;
   DataLayer pnmlData;
   GuiView view;
   JRootPane rootPane;
   
   
   /**
    * Creates new form PlaceEditor
    */
   public TimedPlaceEditorPanel(JRootPane _rootPane, TimedPlace _place, 
           DataLayer _pnmlData, GuiView _view) {
      place = _place;
      pnmlData = _pnmlData;
      view = _view;
      attributesVisible = place.getAttributesVisible();
      marking = place.getCurrentMarking();
      name = place.getName();
      mParameter = place.getMarkingParameter();
      rootPane = _rootPane;
      
      initComponents();
      rootPane.setDefaultButton(okButton);

      MarkingParameter[] markings = pnmlData.getMarkingParameters();
      if (markings.length > 0) {
         markingComboBox.addItem("");
         for (int i = 0; i < markings.length; i++) {
            markingComboBox.addItem(markings[i]);
         }
      } else {
         markingComboBox.setEnabled(false);
      }  
      
      if (mParameter != null){
         for (int i = 1; i < markingComboBox.getItemCount(); i++) {
            if (mParameter == (MarkingParameter)markingComboBox.getItemAt(i)){
               markingComboBox.setSelectedIndex(i);
            }
         }
      }
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      placeEditorPanel = new javax.swing.JPanel();
      nameLabel = new javax.swing.JLabel();
      nameTextField = new javax.swing.JTextField();
      markingLabel = new javax.swing.JLabel();
      invariantLabel = new javax.swing.JLabel();
      markingSpinner = new javax.swing.JSpinner();
      markingSpinner.setModel(new SpinnerNumberModel(place.getCurrentMarking(),0,Integer.MAX_VALUE,1));

      attributesCheckBox = new javax.swing.JCheckBox();
      markingComboBox = new javax.swing.JComboBox();
      buttonPanel = new javax.swing.JPanel();
      okButton = new javax.swing.JButton();
      cancelButton = new javax.swing.JButton();
      invariantGroup = new JPanel(new FlowLayout());

//      tokenPanel = new JPanel(new FlowLayout());
      
      setLayout(new java.awt.GridBagLayout());
      
      placeEditorPanel.setLayout(new java.awt.GridBagLayout());

      placeEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Place Editor"));
      nameLabel.setText("Name:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(nameLabel, gridBagConstraints);

      nameTextField.setText(place.getName());
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(nameTextField, gridBagConstraints);

      markingLabel.setText("Marking:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(markingLabel, gridBagConstraints);

      invariantLabel.setText("Invariant:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(invariantLabel, gridBagConstraints);
      
      invariantRelation = new JComboBox(new String[]{"<=","<"});
      invariantSpinner = new JSpinner(new SpinnerNumberModel(0,0,Integer.MAX_VALUE,1));
      invariantSpinner.addChangeListener(new ChangeListener(){
		public void stateChanged(ChangeEvent e) {
			if ((Integer)invariantSpinner.getValue() < 1){
				invariantRelation.setModel( new DefaultComboBoxModel(new String[]{"<="}) );
				invariantRelation.setSelectedItem("<=");
			}else if (invariantRelation.getModel().getSize()==1){
				invariantRelation.setModel( new DefaultComboBoxModel(new String[]{"<=","<"}) );
			}
			
		}
    	  
      });
      String invariantToSet = place.getInvariant();
      int invariantValue = 0;
      boolean isInf = false;
      if (invariantToSet.contains("inf")) isInf = true;
      if (invariantToSet.contains("<=")){
    	  invariantRelation.setSelectedItem("<=");
    	  invariantValue = Integer.parseInt( invariantToSet.substring(2));
      }else {
    	  invariantRelation.setSelectedItem("<");
    	  if (isInf){
    		  invariantSpinner.setEnabled(false);
    	  }else{
    		  invariantValue = Integer.parseInt( invariantToSet.substring(1));
    	  }
      }
      
      invariantGroup.add(invariantRelation);
      
      invariantSpinner.setMaximumSize(new Dimension(50,30));
      invariantSpinner.setMinimumSize(new Dimension(50,30));
      invariantSpinner.setPreferredSize(new Dimension(50,30));
      invariantSpinner.setValue(invariantValue);
      invariantGroup.add(invariantSpinner);
      
      invariantInf = new JCheckBox("inf", isInf);
      invariantInf.addActionListener(new ActionListener(){

		public void actionPerformed(ActionEvent arg0) {
			if ( ! invariantInf.isSelected()){
				invariantSpinner.setEnabled(true);
				invariantRelation.setSelectedItem("<=");
				if ((Integer)invariantSpinner.getValue() < 1){
					invariantRelation.setModel(new DefaultComboBoxModel(new String[]{"<="}));
				}
			}else {
				invariantSpinner.setEnabled(false);
				invariantRelation.setSelectedItem("<");
				invariantRelation.setModel(new DefaultComboBoxModel(new String[]{"<"}));
			}
			
		}
    	  
      });
      invariantGroup.add(invariantInf);
      
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = GridBagConstraints.WEST;
//      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(invariantGroup, gridBagConstraints);
      
      
      markingSpinner.setMinimumSize(new java.awt.Dimension(50, 20));
      markingSpinner.setPreferredSize(new java.awt.Dimension(50, 20));
//      markingSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
//         public void stateChanged(javax.swing.event.ChangeEvent evt) {
////            markingSpinnerStateChanged(evt);
//        	 if (tokenPanel.getComponents().length > (Integer) markingSpinner.getValue() ){
//        		 tokenPanel.remove(tokenPanel.getComponents().length-1);
//        	 }else{
//        		 JSpinner newAgeSpinner = new JSpinner( new SpinnerNumberModel( 0f, 0f, Float.MAX_VALUE, 1f ) ); 
//        		 newAgeSpinner.setMaximumSize(new Dimension(50,30));
//        		 newAgeSpinner.setMinimumSize(new Dimension(50,30));
//        		 newAgeSpinner.setPreferredSize(new Dimension(50,30));
//        		 tokenPanel.add(newAgeSpinner);
//        	 }
//        	 ((EscapableDialog)rootPane.getParent()).pack();
//         }
//      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(markingSpinner, gridBagConstraints);

      attributesCheckBox.setSelected(place.getAttributesVisible());
      attributesCheckBox.setText("Show place attributes");
      attributesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      attributesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(attributesCheckBox, gridBagConstraints);
/*
      markingComboBox.setMaximumSize(new java.awt.Dimension(162, 22));
      markingComboBox.setMinimumSize(new java.awt.Dimension(162, 22));
      markingComboBox.setPreferredSize(new java.awt.Dimension(162, 22));
      markingComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            markingComboBoxActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(markingComboBox, gridBagConstraints);
*/
//      tokenPanel.setBorder(new TitledBorder("Age of tokens"));
//      gridBagConstraints.gridx = 2;
//      gridBagConstraints.gridy = 1;
//      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
//      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
//      placeEditorPanel.add(tokenPanel, gridBagConstraints);
//      
//      for (int i=0; i < place.getCurrentMarking(); i++){
//    	  float currentAge = place.getTokens().get(i);
//    	  JSpinner newAgeSpinner = new JSpinner( new SpinnerNumberModel( currentAge, 0, Integer.MAX_VALUE, 1 ) ); 
//    	  newAgeSpinner.setMaximumSize(new Dimension(50,30));
//          newAgeSpinner.setMinimumSize(new Dimension(50,30));
//          newAgeSpinner.setPreferredSize(new Dimension(50,30));
//    	  tokenPanel.add(newAgeSpinner);
//      }
      
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
      add(placeEditorPanel, gridBagConstraints);

      buttonPanel.setLayout(new java.awt.GridBagLayout());

      okButton.setText("OK");
      okButton.setMaximumSize(new java.awt.Dimension(75, 25));
      okButton.setMinimumSize(new java.awt.Dimension(75, 25));
      okButton.setPreferredSize(new java.awt.Dimension(75, 25));
      okButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonHandler(evt);
         }
      });
      okButton.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            okButtonKeyPressed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 9);
      buttonPanel.add(okButton, gridBagConstraints);

      cancelButton.setText("Cancel");
      cancelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonHandler(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
      buttonPanel.add(cancelButton, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      add(buttonPanel, gridBagConstraints);

   }// </editor-fold>//GEN-END:initComponents

/*   private void markingSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_markingSpinnerStateChanged
      if ((markingComboBox.getSelectedIndex() > 0) &&
         (((MarkingParameter)markingComboBox.getSelectedItem()).getValue() 
                 != markingSpinner.getValue())){
         markingComboBox.setSelectedIndex(0);
      }
      
   }//GEN-LAST:event_markingSpinnerStateChanged
*/   
   ChangeListener changeListener = new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
         JSpinner spinner = (JSpinner)evt.getSource();
         JSpinner.NumberEditor numberEditor =
                 ((JSpinner.NumberEditor)spinner.getEditor());
         numberEditor.getTextField().setBackground(new Color(255,255,255));
         spinner.removeChangeListener(this);
      }
   };   

   
   private void markingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markingComboBoxActionPerformed
      Integer index = markingComboBox.getSelectedIndex();

      if (index > 0){
         Integer value = ((MarkingParameter)markingComboBox.getItemAt(index)).getValue();
         markingSpinner.setValue(value);
      } 
   }//GEN-LAST:event_markingComboBoxActionPerformed

   
   private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyPressed
      if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
         doOK();
      }
   }//GEN-LAST:event_okButtonKeyPressed

   private void doOK(){
      Integer newMarking = marking;
      try {
         newMarking = (Integer)markingSpinner.getValue();
      } catch (Exception e){
         JSpinner.NumberEditor numberEditor =
                 ((JSpinner.NumberEditor)markingSpinner.getEditor());
         numberEditor.getTextField().setBackground(new Color(255,0,0));
         markingSpinner.addChangeListener(changeListener);
         markingSpinner.requestFocusInWindow();
         return;
      }      
      
      view.getUndoManager().newEdit(); // new "transaction""
      
      String newName = nameTextField.getText();
      
      if (!newName.equals(name)){
    	  if (! Pattern.matches("[a-zA-Z]([\\_a-zA-Z0-9])*", newName)){
    		  System.err.println("Acceptable names for places are defined by the regular expression:\n[a-zA-Z][_a-zA-Z]*");
    		  JOptionPane.showMessageDialog(CreateGui.getApp(),
    				"Acceptable names for places are defined by the regular expression:\n[a-zA-Z][_a-zA-Z0-9]*",
      				"Error",
      				JOptionPane.INFORMATION_MESSAGE);
    		  return;
    	  }else {
    		  view.getUndoManager().addEdit(place.setPNObjectName(newName));
    	  }
//    	  if (!(newName.charAt(0)=='#')){
//    		  if(newName.contains("*") || newName.contains("+")){
//        		  System.err.println("Places can't have names with *'s or +'s");
//        		  JOptionPane.showMessageDialog(CreateGui.getApp(),
//          				"Places can't have names with *'s or +'s\n",
//          				"Error",
//          				JOptionPane.INFORMATION_MESSAGE);
//        		  return;
//        	  }else {
//        		  view.getUndoManager().addEdit(place.setPNObjectName(newName));
//        	  }
//    	  } else {
//    		  System.err.println("Places can't have names starting with #");
//    		  JOptionPane.showMessageDialog(CreateGui.getApp(),
//      				"Places can't have names starting with #\n",
//      				"Error",
//      				JOptionPane.INFORMATION_MESSAGE);
//    		  return;
//    	  }
      }
      
      String newInvariant = (String)((JComboBox)invariantGroup.getComponent(0)).getSelectedItem();
      if ( ! invariantInf.isSelected()){
    	  newInvariant = newInvariant + ((JSpinner)invariantGroup.getComponent(1)).getValue();
      } else {
    	  newInvariant = newInvariant + "inf";
    	  
      }
      //if ()  -  TODO do some check if it has canged and if value is ok
      view.getUndoManager().addEdit(place.setInvariant(newInvariant));
      
      if (markingComboBox.getSelectedIndex() >0) {
         // There's a marking parameter selected
         MarkingParameter parameter = 
                 (MarkingParameter)markingComboBox.getSelectedItem() ;
         if (parameter != mParameter){

            if (mParameter != null) {
               // The marking parameter has been changed
               view.getUndoManager().addEdit(place.changeMarkingParameter(
                        (MarkingParameter)markingComboBox.getSelectedItem()));
            } else {
               //The marking parameter has been changed
               view.getUndoManager().addEdit(place.setMarkingParameter(
                       (MarkingParameter)markingComboBox.getSelectedItem()));
            }
         }
      } else {
         // There is no marking parameter selected
         if (mParameter != null) {
            // The rate parameter has been changed
            view.getUndoManager().addEdit(place.clearMarkingParameter());
         }
         if (newMarking != marking) {
            view.getUndoManager().addEdit(place.setCurrentMarking(newMarking));            
         }
      }
      
//      ArrayList<Float> ageOfTokensToSet = new ArrayList<Float>();
//      for (Component ageOfTokenSpinner : tokenPanel.getComponents()){
//    	  if (ageOfTokenSpinner instanceof JSpinner){
//    		  ageOfTokensToSet.add(Float.parseFloat(""+((JSpinner)ageOfTokenSpinner).getValue()));
//    	  }
//      }
//      view.getUndoManager().addEdit(place.setAgeOfTokens(ageOfTokensToSet));
      
      
      if (attributesVisible != attributesCheckBox.isSelected()){
         place.toggleAttributesVisible();
      }    
      place.repaint();
      exit();
   }
   
   
   private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
      doOK();
   }//GEN-LAST:event_okButtonHandler

   
   private void exit() {
      rootPane.getParent().setVisible(false);
   }
   
   
   private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
      exit();
   }//GEN-LAST:event_cancelButtonHandler

      
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox attributesCheckBox;
   private javax.swing.JPanel buttonPanel;
   private javax.swing.JButton cancelButton;
   private javax.swing.JLabel invariantLabel;
   private javax.swing.JComboBox markingComboBox;
   private javax.swing.JLabel markingLabel;
   private javax.swing.JSpinner markingSpinner;
   private javax.swing.JLabel nameLabel;
   private javax.swing.JTextField nameTextField;
   private javax.swing.JButton okButton;
   private javax.swing.JPanel placeEditorPanel;
   // End of variables declaration//GEN-END:variables
   private JPanel invariantGroup;
   private JComboBox invariantRelation;
   private JSpinner invariantSpinner;
   private JCheckBox invariantInf;
//   private JPanel tokenPanel;
}
