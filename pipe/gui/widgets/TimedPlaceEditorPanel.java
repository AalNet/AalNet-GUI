package pipe.gui.widgets;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Set;
import java.util.regex.Pattern;

import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import pipe.dataLayer.DataLayer;
import pipe.dataLayer.MarkingParameter;
import pipe.dataLayer.TimedPlace;
import pipe.gui.CreateGui;
import pipe.gui.GuiView;

/**
 *
 * @author  pere
 */
public class TimedPlaceEditorPanel 
extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4163767112591119036L;
	TimedPlace place;
	Boolean attributesVisible;
	Integer marking;
	String name;
	MarkingParameter mParameter;
	DataLayer pnmlData;
	GuiView view;
	JRootPane rootPane;


	/**
	 * Creates new form PlaceEditor
	 */
	public TimedPlaceEditorPanel(JRootPane _rootPane, TimedPlace _place, 
			DataLayer _pnmlData, GuiView _view) {
		place = _place;
		pnmlData = _pnmlData;
		view = _view;
		attributesVisible = place.getAttributesVisible();
		marking = place.getCurrentMarking();
		name = place.getName();
		mParameter = place.getMarkingParameter();
		rootPane = _rootPane;

		initComponents();
		rootPane.setDefaultButton(okButton);

		MarkingParameter[] markings = pnmlData.getMarkingParameters();
		if (markings.length > 0) {
			markingComboBox.addItem("");
			for (int i = 0; i < markings.length; i++) {
				markingComboBox.addItem(markings[i]);
			}
		} else {
			markingComboBox.setEnabled(false);
		}  

		if (mParameter != null){
			for (int i = 1; i < markingComboBox.getItemCount(); i++) {
				if (mParameter == (MarkingParameter)markingComboBox.getItemAt(i)){
					markingComboBox.setSelectedIndex(i);
				}
			}
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		placeEditorPanel = new javax.swing.JPanel();
		nameLabel = new javax.swing.JLabel();
		nameTextField = new javax.swing.JTextField();
		markingLabel = new javax.swing.JLabel();
		invariantLabel = new javax.swing.JLabel();
		markingSpinner = new javax.swing.JSpinner();
		markingSpinner.setModel(new SpinnerNumberModel(place.getCurrentMarking(),0,Integer.MAX_VALUE,1));

		attributesCheckBox = new javax.swing.JCheckBox();
		markingComboBox = new javax.swing.JComboBox();
		buttonPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		invariantGroup = new JPanel(new GridBagLayout());


		//      tokenPanel = new JPanel(new FlowLayout());

		setLayout(new java.awt.GridBagLayout());

		placeEditorPanel.setLayout(new java.awt.GridBagLayout());

		placeEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Place Editor"));
		nameLabel.setText("Name:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(nameLabel, gridBagConstraints);

		nameTextField.setText(place.getName());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(nameTextField, gridBagConstraints);

		markingLabel.setText("Marking:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(markingLabel, gridBagConstraints);

		initInvariantPanel();
		

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = GridBagConstraints.WEST;
		//      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(invariantGroup, gridBagConstraints);

		markingSpinner.setMinimumSize(new java.awt.Dimension(50, 20));
		markingSpinner.setPreferredSize(new java.awt.Dimension(50, 20));
		//      markingSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
		//         public void stateChanged(javax.swing.event.ChangeEvent evt) {
		////            markingSpinnerStateChanged(evt);
		//        	 if (tokenPanel.getComponents().length > (Integer) markingSpinner.getValue() ){
		//        		 tokenPanel.remove(tokenPanel.getComponents().length-1);
		//        	 }else{
		//        		 JSpinner newAgeSpinner = new JSpinner( new SpinnerNumberModel( 0f, 0f, Float.MAX_VALUE, 1f ) ); 
		//        		 newAgeSpinner.setMaximumSize(new Dimension(50,30));
		//        		 newAgeSpinner.setMinimumSize(new Dimension(50,30));
		//        		 newAgeSpinner.setPreferredSize(new Dimension(50,30));
		//        		 tokenPanel.add(newAgeSpinner);
		//        	 }
		//        	 ((EscapableDialog)rootPane.getParent()).pack();
		//         }
		//      });

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(markingSpinner, gridBagConstraints);

		attributesCheckBox.setSelected(place.getAttributesVisible());
		attributesCheckBox.setText("Show place attributes");
		attributesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		attributesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(attributesCheckBox, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
		add(placeEditorPanel, gridBagConstraints);

		buttonPanel.setLayout(new java.awt.GridBagLayout());

		okButton.setText("OK");
		okButton.setMaximumSize(new java.awt.Dimension(75, 25));
		okButton.setMinimumSize(new java.awt.Dimension(75, 25));
		okButton.setPreferredSize(new java.awt.Dimension(75, 25));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonHandler(evt);
			}
		});
		okButton.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				okButtonKeyPressed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 9);
		buttonPanel.add(okButton, gridBagConstraints);

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
		buttonPanel.add(cancelButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		add(buttonPanel, gridBagConstraints);

	}// </editor-fold>//GEN-END:initComponents

	private void initInvariantPanel() {
		java.awt.GridBagConstraints gridBagConstraints;
		invariantLabel.setText("Invariant:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		placeEditorPanel.add(invariantLabel, gridBagConstraints);

		invRelationNormal = new JComboBox(new String[]{"<=","<"});
		invRelationConstant = new JComboBox(new String[]{"<=","<"});
		invariantSpinner = new JSpinner(new SpinnerNumberModel(0,0,Integer.MAX_VALUE,1));
		invariantSpinner.addChangeListener(new ChangeListener(){
			public void stateChanged(ChangeEvent e) {
				if ((Integer)invariantSpinner.getValue() < 1){
					invRelationNormal.setModel( new DefaultComboBoxModel(new String[]{"<="}) );
					invRelationNormal.setSelectedItem("<=");
				}else if (invRelationNormal.getModel().getSize()==1){
					invRelationNormal.setModel( new DefaultComboBoxModel(new String[]{"<=","<"}) );
				}

			}

		});
				
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.insets = new Insets(3,3,3,3);
		invariantGroup.add(invRelationNormal, gbc);
		
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.insets = new Insets(3,3,3,3);
		invariantGroup.add(invRelationConstant, gbc);
		
		invariantSpinner.setMaximumSize(new Dimension(50,30));
		invariantSpinner.setMinimumSize(new Dimension(50,30));
		invariantSpinner.setPreferredSize(new Dimension(50,30));

		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.insets = new Insets(3,3,3,3);
		invariantGroup.add(invariantSpinner, gbc);

		invariantInf = new JCheckBox("inf");
		invariantInf.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				if ( ! invariantInf.isSelected()){
					invariantSpinner.setEnabled(true);
					invRelationNormal.setSelectedItem("<=");
					if ((Integer)invariantSpinner.getValue() < 1){
						invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<="}));
					}
					else{
						invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<=", "<"}));
					}
				}else {
					invariantSpinner.setEnabled(false);
					invRelationNormal.setSelectedItem("<");
					invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<"}));
				}

			}

		});
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 0;
		invariantGroup.add(invariantInf, gbc);
		
		Set<String> constants = CreateGui.getModel().getConstantNames();
		invConstantsComboBox = new JComboBox(constants.toArray());
		invConstantsComboBox.setMinimumSize(new Dimension(80,30));
		invConstantsComboBox.setPreferredSize(new Dimension(80,30));
		invConstantsComboBox.addItemListener(new ItemListener(){
			public void itemStateChanged(ItemEvent e){
				if(e.getStateChange() == ItemEvent.SELECTED){
					setRelationModelForConstants();
				}
			}
		});
		
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		invariantGroup.add(invConstantsComboBox, gbc);
				
		normalInvRadioButton = new JRadioButton("Normal");
		normalInvRadioButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				disableInvariantComponents();
				enableNormalInvariantComponents();
			}
		});

		
		constantInvRadioButton = new JRadioButton("Constant");
		constantInvRadioButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				disableInvariantComponents();
				enableConstantInvariantComponents();
			}
		});
		if(constants.isEmpty())
			constantInvRadioButton.setEnabled(false);
		

		ButtonGroup btnGroup = new ButtonGroup();
		btnGroup.add(normalInvRadioButton);
		btnGroup.add(constantInvRadioButton);

		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		invariantGroup.add(normalInvRadioButton,gbc);

		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		invariantGroup.add(constantInvRadioButton,gbc);

		String invariantToSet = place.getInvariant();
		int invariantValue = 0;
		int substringStart = 0;
		
		String constantName ="";
		
		if (invariantToSet.contains("<=")){
			invRelationNormal.setSelectedItem("<=");
			substringStart = 2;
		}else {
			invRelationNormal.setSelectedItem("<");
			substringStart = 1;
		}
		
		boolean isInf = false;
		if (invariantToSet.substring(substringStart).equals("inf")){
			isInf = true;
			invariantSpinner.setEnabled(false);
			invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<"}));
			invariantInf.setSelected(true);
			invRelationNormal.setSelectedItem("<");
		}
		
		if(!isInf)
		{
			boolean isNumber = true;
			try{
				invariantValue = Integer.parseInt(invariantToSet.substring(substringStart));
			}catch(NumberFormatException e){
				isNumber = false;
			}
			
			if(!isNumber){
				constantName = invariantToSet.substring(substringStart);
			}
		}
		
		disableInvariantComponents();
		if(!constantName.isEmpty()){
			enableConstantInvariantComponents();
			constantInvRadioButton.setSelected(true);
			invConstantsComboBox.setSelectedItem(constantName);
			//setRelationModelForConstants();
		}
		else{
			enableNormalInvariantComponents();
			normalInvRadioButton.setSelected(true);
			if(!isInf){ 
				if ((Integer)invariantSpinner.getValue() < 1){
					invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<="}));
				}
				else{
					invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<=", "<"}));
				}
				invariantSpinner.setValue(invariantValue);
				invariantSpinner.setEnabled(true);
				invRelationNormal.setSelectedItem(invariantToSet.substring(0, substringStart));
				
				invariantInf.setSelected(false);
			}
		}
	}

	private void setRelationModelForConstants() {
		int value = CreateGui.getModel().getConstantValue(
				invConstantsComboBox.getSelectedItem().toString());
		
		String selected = invRelationConstant.getSelectedItem().toString();
		if(value == 0){
			invRelationConstant.setModel(new DefaultComboBoxModel(new String[]{"<="}));
		}else{
			invRelationConstant.setModel(new DefaultComboBoxModel(new String[]{"<=", "<"}));
		}
		invRelationConstant.setSelectedItem(selected);
	}
	
	protected void enableConstantInvariantComponents() {
		invRelationConstant.setEnabled(true);
		invConstantsComboBox.setEnabled(true);
		setRelationModelForConstants();
	}

	protected void enableNormalInvariantComponents() {
		invRelationNormal.setEnabled(true);
		invariantInf.setEnabled(true);
		invariantSpinner.setValue(0);
		invariantInf.setSelected(true);
		invRelationNormal.setModel(new DefaultComboBoxModel(new String[]{"<"}));
	}

	protected void disableInvariantComponents() {
		invRelationNormal.setEnabled(false);
		invRelationConstant.setEnabled(false);
		invariantSpinner.setEnabled(false);
		invConstantsComboBox.setEnabled(false);
		invariantInf.setEnabled(false);
	}

	/*   private void markingSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_markingSpinnerStateChanged
      if ((markingComboBox.getSelectedIndex() > 0) &&
         (((MarkingParameter)markingComboBox.getSelectedItem()).getValue() 
                 != markingSpinner.getValue())){
         markingComboBox.setSelectedIndex(0);
      }

   }//GEN-LAST:event_markingSpinnerStateChanged
	 */   
	ChangeListener changeListener = new javax.swing.event.ChangeListener() {
		public void stateChanged(javax.swing.event.ChangeEvent evt) {
			JSpinner spinner = (JSpinner)evt.getSource();
			JSpinner.NumberEditor numberEditor =
				((JSpinner.NumberEditor)spinner.getEditor());
			numberEditor.getTextField().setBackground(new Color(255,255,255));
			spinner.removeChangeListener(this);
		}
	};   


	private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyPressed
		if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
			doOK();
		}
	}//GEN-LAST:event_okButtonKeyPressed

	private void doOK(){
		Integer newMarking = marking;
		try {
			newMarking = (Integer)markingSpinner.getValue();
		} catch (Exception e){
			JSpinner.NumberEditor numberEditor =
				((JSpinner.NumberEditor)markingSpinner.getEditor());
			numberEditor.getTextField().setBackground(new Color(255,0,0));
			markingSpinner.addChangeListener(changeListener);
			markingSpinner.requestFocusInWindow();
			return;
		}      

		view.getUndoManager().newEdit(); // new "transaction""

		String newName = nameTextField.getText();

		if (!newName.equals(name)){
			if (! Pattern.matches("[a-zA-Z]([\\_a-zA-Z0-9])*", newName)){
				System.err.println("Acceptable names for places are defined by the regular expression:\n[a-zA-Z][_a-zA-Z]*");
				JOptionPane.showMessageDialog(CreateGui.getApp(),
						"Acceptable names for places are defined by the regular expression:\n[a-zA-Z][_a-zA-Z0-9]*",
						"Error",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			} else if ( (pnmlData.getPlaceByName(newName) != null) || (pnmlData.getTransitionByName(newName) != null) ){
				System.err.println("Places cannot be called the same as an other Place or Transition.");
				JOptionPane.showMessageDialog(CreateGui.getApp(),
						"Places cannot be called the same as an other Place or Transition.",
						"Error",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			} else {
				view.getUndoManager().addEdit(place.setPNObjectName(newName));
			}
			//    	  if (!(newName.charAt(0)=='#')){
			//    		  if(newName.contains("*") || newName.contains("+")){
			//        		  System.err.println("Places can't have names with *'s or +'s");
			//        		  JOptionPane.showMessageDialog(CreateGui.getApp(),
			//          				"Places can't have names with *'s or +'s\n",
			//          				"Error",
			//          				JOptionPane.INFORMATION_MESSAGE);
			//        		  return;
			//        	  }else {
			//        		  view.getUndoManager().addEdit(place.setPNObjectName(newName));
			//        	  }
			//    	  } else {
			//    		  System.err.println("Places can't have names starting with #");
			//    		  JOptionPane.showMessageDialog(CreateGui.getApp(),
			//      				"Places can't have names starting with #\n",
			//      				"Error",
			//      				JOptionPane.INFORMATION_MESSAGE);
			//    		  return;
			//    	  }
		}

		boolean isNormalInvariant = normalInvRadioButton.isSelected();
		String newInvariant = "";
	
		if(isNormalInvariant)
		{
			newInvariant = (String)invRelationNormal.getSelectedItem();
			if ( ! invariantInf.isSelected()){
				newInvariant = newInvariant + invariantSpinner.getValue();
			} else {
				newInvariant = newInvariant + "inf";
			}
		}
		else{
			String constantName = (String)invConstantsComboBox.getSelectedItem();
			newInvariant = (String)invRelationConstant.getSelectedItem() + constantName;
		}
		
		//if ()  -  TODO do some check if it has canged and if value is ok
		view.getUndoManager().addEdit(place.setInvariant(newInvariant));

		if (markingComboBox.getSelectedIndex() >0) {
			// There's a marking parameter selected
			MarkingParameter parameter = 
				(MarkingParameter)markingComboBox.getSelectedItem() ;
			if (parameter != mParameter){

				if (mParameter != null) {
					// The marking parameter has been changed
					view.getUndoManager().addEdit(place.changeMarkingParameter(
							(MarkingParameter)markingComboBox.getSelectedItem()));
				} else {
					//The marking parameter has been changed
					view.getUndoManager().addEdit(place.setMarkingParameter(
							(MarkingParameter)markingComboBox.getSelectedItem()));
				}
			}
		} else {
			// There is no marking parameter selected
			if (mParameter != null) {
				// The rate parameter has been changed
				view.getUndoManager().addEdit(place.clearMarkingParameter());
			}
			if (newMarking != marking) {
				view.getUndoManager().addEdit(place.setCurrentMarking(newMarking));            
			}
		}

		//      ArrayList<Float> ageOfTokensToSet = new ArrayList<Float>();
		//      for (Component ageOfTokenSpinner : tokenPanel.getComponents()){
		//    	  if (ageOfTokenSpinner instanceof JSpinner){
		//    		  ageOfTokensToSet.add(Float.parseFloat(""+((JSpinner)ageOfTokenSpinner).getValue()));
		//    	  }
		//      }
		//      view.getUndoManager().addEdit(place.setAgeOfTokens(ageOfTokensToSet));


		if (attributesVisible != attributesCheckBox.isSelected()){
			place.toggleAttributesVisible();
		}    
		place.repaint();
		
		CreateGui.getModel().buildConstraints();
		exit();
	}


	private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
		doOK();
	}//GEN-LAST:event_okButtonHandler


	private void exit() {
		rootPane.getParent().setVisible(false);
	}


	private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
		exit();
	}//GEN-LAST:event_cancelButtonHandler



	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox attributesCheckBox;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel invariantLabel;
	private javax.swing.JComboBox markingComboBox;
	private javax.swing.JLabel markingLabel;
	private javax.swing.JSpinner markingSpinner;
	private javax.swing.JLabel nameLabel;
	private javax.swing.JTextField nameTextField;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel placeEditorPanel;
	// End of variables declaration//GEN-END:variables
	private JPanel invariantGroup;
	private JComboBox invRelationNormal;
	private JComboBox invRelationConstant;
	private JSpinner invariantSpinner;
	private JCheckBox invariantInf;
	private JComboBox invConstantsComboBox;
	private JRadioButton normalInvRadioButton;
	private JRadioButton constantInvRadioButton;
	//   private JPanel tokenPanel;
}
