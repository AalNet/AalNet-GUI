package pipe.gui.widgets;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Set;
import java.util.regex.Pattern;

import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import pipe.dataLayer.DataLayer;
import pipe.dataLayer.NetType;
import pipe.dataLayer.TAPNQuery;
import pipe.dataLayer.TimedPlaceComponent;
import pipe.gui.CreateGui;
import pipe.gui.DrawingSurfaceImpl;
import dk.aau.cs.TCTL.visitors.RenamePlaceTCTLVisitor;
import dk.aau.cs.gui.TabContent;
import dk.aau.cs.model.tapn.ConstantBound;
import dk.aau.cs.model.tapn.IntBound;
import dk.aau.cs.model.tapn.TimeInvariant;
import dk.aau.cs.model.tapn.Bound.InfBound;

/**
 * 
 * @author pere
 */
public class PlaceEditorPanel extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4163767112591119036L;
	TimedPlaceComponent place;
	Boolean attributesVisible;
	Integer marking;
	String name;
	DataLayer guiModel;
	DrawingSurfaceImpl view;
	JRootPane rootPane;

	/**
	 * Creates new form PlaceEditor
	 */
	public PlaceEditorPanel(JRootPane _rootPane, TimedPlaceComponent _place,
			DataLayer _pnmlData, DrawingSurfaceImpl _view) {
		place = _place;
		guiModel = _pnmlData;
		view = _view;
		attributesVisible = place.getAttributesVisible();
		marking = place.getNumberOfTokens();
		name = place.getName();
		rootPane = _rootPane;

		initComponents();
		rootPane.setDefaultButton(okButton);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		placeEditorPanel = new javax.swing.JPanel();
		new javax.swing.JComboBox();

		setLayout(new java.awt.GridBagLayout());

		placeEditorPanel.setLayout(new java.awt.GridBagLayout());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
		add(placeEditorPanel, gridBagConstraints);

		initBasicPropertiesPanel();
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
		placeEditorPanel.add(basicPropertiesPanel, gridBagConstraints);

		if (guiModel.netType().equals(NetType.TAPN)) {
			initTimeInvariantPanel();
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 1;
			gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
			gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
			placeEditorPanel.add(timeInvariantPanel, gridBagConstraints);
		}

		initButtonPanel();
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(buttonPanel, gridBagConstraints);
	}

	private void initButtonPanel() {
		java.awt.GridBagConstraints gridBagConstraints;
		buttonPanel = new javax.swing.JPanel();
		buttonPanel.setLayout(new java.awt.GridBagLayout());

		okButton = new javax.swing.JButton();
		okButton.setText("OK");

		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonHandler(evt);
			}
		});
		okButton.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyPressed(java.awt.event.KeyEvent evt) {
				okButtonKeyPressed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 9);
		buttonPanel.add(okButton, gridBagConstraints);

		cancelButton = new javax.swing.JButton();
		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonHandler(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
		buttonPanel.add(cancelButton, gridBagConstraints);
	}

	private void initBasicPropertiesPanel() {
		basicPropertiesPanel = new JPanel();
		basicPropertiesPanel.setLayout(new java.awt.GridBagLayout());
		basicPropertiesPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Place"));

		nameLabel = new javax.swing.JLabel();
		nameLabel.setText("Name:");
		GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		basicPropertiesPanel.add(nameLabel, gridBagConstraints);

		nameTextField = new javax.swing.JTextField();
		nameTextField.setText(place.getName());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		basicPropertiesPanel.add(nameTextField, gridBagConstraints);

		markingLabel = new javax.swing.JLabel();
		markingLabel.setText("Marking:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		basicPropertiesPanel.add(markingLabel, gridBagConstraints);

		markingSpinner = new javax.swing.JSpinner();
		markingSpinner.setModel(new SpinnerNumberModel(place
				.getNumberOfTokens(), 0, Integer.MAX_VALUE, 1));
		markingSpinner.setMinimumSize(new java.awt.Dimension(50, 20));
		markingSpinner.setPreferredSize(new java.awt.Dimension(50, 20));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		basicPropertiesPanel.add(markingSpinner, gridBagConstraints);

		attributesCheckBox = new javax.swing.JCheckBox();
		attributesCheckBox.setSelected(place.getAttributesVisible());
		attributesCheckBox.setText("Show place attributes");
		attributesCheckBox.setBorder(javax.swing.BorderFactory
				.createEmptyBorder(0, 0, 0, 0));
		attributesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		basicPropertiesPanel.add(attributesCheckBox, gridBagConstraints);
	}

	private void initTimeInvariantPanel() {
		timeInvariantPanel = new JPanel();
		timeInvariantPanel.setLayout(new java.awt.GridBagLayout());
		timeInvariantPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Time Invariant"));

		invariantGroup = new JPanel(new GridBagLayout());

		invRelationNormal = new JComboBox(new String[] { "<=", "<" });
		invRelationConstant = new JComboBox(new String[] { "<=", "<" });
		invariantSpinner = new JSpinner(new SpinnerNumberModel(0, 0,
				Integer.MAX_VALUE, 1));
		invariantSpinner.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if ((Integer) invariantSpinner.getValue() < 1) {
					invRelationNormal.setModel(new DefaultComboBoxModel(
							new String[] { "<=" }));
					invRelationNormal.setSelectedItem("<=");
				} else if (invRelationNormal.getModel().getSize() == 1) {
					invRelationNormal.setModel(new DefaultComboBoxModel(
							new String[] { "<=", "<" }));
				}

			}

		});

		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.insets = new Insets(3, 3, 3, 3);
		invariantGroup.add(invRelationNormal, gbc);

		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.insets = new Insets(3, 3, 3, 3);
		invariantGroup.add(invRelationConstant, gbc);


		invariantSpinner.setMaximumSize(new Dimension(50, 30));
		invariantSpinner.setMinimumSize(new Dimension(50, 30));
		invariantSpinner.setPreferredSize(new Dimension(50, 30));


		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.insets = new Insets(3, 3, 3, 3);
		invariantGroup.add(invariantSpinner, gbc);

		invariantInf = new JCheckBox("inf");
		invariantInf.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				if (!invariantInf.isSelected()) {
					invariantSpinner.setEnabled(true);
					invRelationNormal.setSelectedItem("<=");
					if ((Integer) invariantSpinner.getValue() < 1) {
						invRelationNormal.setModel(new DefaultComboBoxModel(
								new String[] { "<=" }));
					} else {
						invRelationNormal.setModel(new DefaultComboBoxModel(
								new String[] { "<=", "<" }));
					}
				} else {
					invariantSpinner.setEnabled(false);
					invRelationNormal.setSelectedItem("<");
					invRelationNormal.setModel(new DefaultComboBoxModel(
							new String[] { "<" }));
				}

			}

		});
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 0;
		invariantGroup.add(invariantInf, gbc);

		Set<String> constants = CreateGui.getCurrentTab().network()
		.getConstantNames();
		invConstantsComboBox = new JComboBox(constants.toArray());

		invConstantsComboBox.setMinimumSize(new Dimension(80, 30));
		invConstantsComboBox.setPreferredSize(new Dimension(80, 30));
		invConstantsComboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					setRelationModelForConstants();
				}
			}
		});

		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		invariantGroup.add(invConstantsComboBox, gbc);

		normalInvRadioButton = new JRadioButton("Normal");
		normalInvRadioButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableInvariantComponents();
				enableNormalInvariantComponents();
			}
		});

		constantInvRadioButton = new JRadioButton("Constant");
		constantInvRadioButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableInvariantComponents();
				enableConstantInvariantComponents();
			}
		});
		if (constants.isEmpty())
			constantInvRadioButton.setEnabled(false);

		ButtonGroup btnGroup = new ButtonGroup();
		btnGroup.add(normalInvRadioButton);
		btnGroup.add(constantInvRadioButton);

		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		invariantGroup.add(normalInvRadioButton, gbc);

		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		invariantGroup.add(constantInvRadioButton, gbc);

		TimeInvariant invariantToSet = place.getInvariant();

		if (invariantToSet.isUpperNonstrict()) {
			invRelationNormal.setSelectedItem("<=");
		} else {
			invRelationNormal.setSelectedItem("<");
		}

		if (invariantToSet.upperBound() instanceof InfBound) {
			invariantSpinner.setEnabled(false);
			invRelationNormal.setModel(new DefaultComboBoxModel(
					new String[] { "<" }));
			invariantInf.setSelected(true);
			invRelationNormal.setSelectedItem("<");
		}

		disableInvariantComponents();
		if (invariantToSet.upperBound() instanceof ConstantBound) {
			enableConstantInvariantComponents();
			constantInvRadioButton.setSelected(true);
			invConstantsComboBox
			.setSelectedItem(((ConstantBound) invariantToSet
					.upperBound()).name());
			invRelationConstant.setSelectedItem(invariantToSet
					.isUpperNonstrict() ? "<=" : "<");
		} else {
			enableNormalInvariantComponents();
			normalInvRadioButton.setSelected(true);
			if (invariantToSet.upperBound() instanceof IntBound) {
				if ((Integer) invariantSpinner.getValue() < 1) {
					invRelationNormal.setModel(new DefaultComboBoxModel(
							new String[] { "<=" }));
				} else {
					invRelationNormal.setModel(new DefaultComboBoxModel(
							new String[] { "<=", "<" }));
				}
				invariantSpinner.setValue(invariantToSet.upperBound().value());
				invariantSpinner.setEnabled(true);
				invRelationNormal.setSelectedItem(invariantToSet
						.isUpperNonstrict() ? "<=" : "<");

				invariantInf.setSelected(false);
			}
		}

		GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
		timeInvariantPanel.add(invariantGroup, gridBagConstraints);
	}

	private void setRelationModelForConstants() {
		int value = CreateGui.getCurrentTab().network().getConstantValue(
				invConstantsComboBox.getSelectedItem().toString());

		String selected = invRelationConstant.getSelectedItem().toString();
		if (value == 0) {
			invRelationConstant.setModel(new DefaultComboBoxModel(
					new String[] { "<=" }));
		} else {
			invRelationConstant.setModel(new DefaultComboBoxModel(new String[] {
					"<=", "<" }));
		}
		invRelationConstant.setSelectedItem(selected);
	}

	protected void enableConstantInvariantComponents() {
		invRelationConstant.setEnabled(true);
		invConstantsComboBox.setEnabled(true);
		setRelationModelForConstants();
	}

	protected void enableNormalInvariantComponents() {
		invRelationNormal.setEnabled(true);
		invariantInf.setEnabled(true);
		invariantSpinner.setValue(0);
		invariantInf.setSelected(true);
		invRelationNormal.setModel(new DefaultComboBoxModel(
				new String[] { "<" }));
	}

	protected void disableInvariantComponents() {
		invRelationNormal.setEnabled(false);
		invRelationConstant.setEnabled(false);
		invariantSpinner.setEnabled(false);
		invConstantsComboBox.setEnabled(false);
		invariantInf.setEnabled(false);
	}

	ChangeListener changeListener = new javax.swing.event.ChangeListener() {
		public void stateChanged(javax.swing.event.ChangeEvent evt) {
			JSpinner spinner = (JSpinner) evt.getSource();
			JSpinner.NumberEditor numberEditor = ((JSpinner.NumberEditor) spinner
					.getEditor());
			numberEditor.getTextField().setBackground(new Color(255, 255, 255));
			spinner.removeChangeListener(this);
		}
	};

	private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {
		if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
			doOK();
		}
	}

	private void doOK() {
		Integer newMarking = marking;
		try {
			newMarking = (Integer) markingSpinner.getValue();
		} catch (Exception e) {
			JSpinner.NumberEditor numberEditor = ((JSpinner.NumberEditor) markingSpinner
					.getEditor());
			numberEditor.getTextField().setBackground(new Color(255, 0, 0));
			markingSpinner.addChangeListener(changeListener);
			markingSpinner.requestFocusInWindow();
			return;
		}

		view.getUndoManager().newEdit(); // new "transaction""

		String newName = nameTextField.getText();

		if (!newName.equals(name)) {
			if (!Pattern.matches("[a-zA-Z]([\\_a-zA-Z0-9])*", newName)) {
				System.err.println("Acceptable names for places are defined by the regular expression:\n[a-zA-Z][_a-zA-Z]*");
				JOptionPane.showMessageDialog(
						CreateGui.getApp(),
						"Acceptable names for places are defined by the regular expression:\n[a-zA-Z][_a-zA-Z0-9]*",
						"Error", JOptionPane.INFORMATION_MESSAGE);
				return;
			} else if ((guiModel.getPlaceByNameIgnoreGiven(place, newName) != null)	|| (guiModel.getTransitionByName(newName) != null)) {
				System.err.println("Places cannot be called the same as an other Place or Transition.");
				JOptionPane.showMessageDialog(
						CreateGui.getApp(),
						"Places cannot be called the same as another Place or Transition.",
						"Error", JOptionPane.INFORMATION_MESSAGE);
				return;
			} else {

				view.getUndoManager().addEdit(place.setPNObjectName(newName));

				Iterable<TAPNQuery> queries = ((TabContent) CreateGui.getTab()
						.getSelectedComponent()).queries();

				RenamePlaceTCTLVisitor renameVisitor = new RenamePlaceTCTLVisitor(
						name, newName);
				for (TAPNQuery q : queries) {
					q.getProperty().accept(renameVisitor, null);
				}
			}
		}

		if (guiModel.netType().equals(NetType.TAPN)) {
			boolean isNormalInvariant = normalInvRadioButton.isSelected();
			TimeInvariant newInvariant;

			if (isNormalInvariant) {

				if (!invariantInf.isSelected()) {
					newInvariant = TimeInvariant
					.parseInvariantWithoutConstant((String) invRelationNormal
							.getSelectedItem()
							+ invariantSpinner.getValue());
				} else {
					newInvariant = TimeInvariant
					.parseInvariantWithoutConstant("<" + "inf");
				}

			} else {
				String constantName = (String) invConstantsComboBox
				.getSelectedItem();
				boolean upperIncluded = ((String) invRelationConstant
						.getSelectedItem()).equals("<=");
				newInvariant = new TimeInvariant(upperIncluded,
						new ConstantBound(CreateGui.getCurrentTab().network()
								.getConstant(constantName)));
			}
			view.getUndoManager().addEdit(place.setInvariant(newInvariant));
		}

		if (newMarking != marking) {
			view.getUndoManager().addEdit(place.setCurrentMarking(newMarking));
		}

		if (attributesCheckBox != null
				&& attributesVisible != attributesCheckBox.isSelected()) {
			place.toggleAttributesVisible();
		}
		place.repaint();

		CreateGui.getCurrentTab().network().buildConstraints();
		exit();
	}

	private void okButtonHandler(java.awt.event.ActionEvent evt) {
		doOK();
	}

	private void exit() {
		rootPane.getParent().setVisible(false);
	}

	private void cancelButtonHandler(java.awt.event.ActionEvent evt) {
		exit();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox attributesCheckBox;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel markingLabel;
	private javax.swing.JSpinner markingSpinner;
	private javax.swing.JLabel nameLabel;
	private javax.swing.JTextField nameTextField;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel placeEditorPanel;
	private javax.swing.JPanel basicPropertiesPanel;
	private javax.swing.JPanel timeInvariantPanel;
	private JPanel invariantGroup;
	private JComboBox invRelationNormal;
	private JComboBox invRelationConstant;
	private JSpinner invariantSpinner;
	private JCheckBox invariantInf;
	private JComboBox invConstantsComboBox;
	private JRadioButton normalInvRadioButton;
	private JRadioButton constantInvRadioButton;
}
